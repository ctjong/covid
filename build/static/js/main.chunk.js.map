{"version":3,"sources":["ServiceWorker.ts","Constants.ts","parsers/NewYorkTimesParser.ts","parsers/JohnHopkinsParser.ts","App.tsx","Index.tsx"],"names":["Boolean","window","location","hostname","match","DATA_SOURCE","TAB_NAMES","TAB_CONFIG","title","buttonText","srcLink","srcText","chartLabel","color","timeClass","timeline","DATA_RETRIEVAL_CONFIG","dataSource","args","tableClass","targetTabNames","dataParsers","cells","name","innerText","value","parseInt","replace","NYTimesParser","data","forEach","tabName","updateTime","document","querySelector","innerHTML","records","date","entries","Promise","resolve","_loadSourceTable","then","_parseSourceTable","timer","setInterval","button","clearInterval","click","rows","querySelectorAll","length","row","entry","push","JohnHopkinsParser","a","fetch","json","_parseData","srcData","this","_getDateString","Date","recordsByDate","Object","keys","country","countryRecord","map","srcRecord","confirmed","deaths","recovered","getFullYear","getMonth","getDate","App","props","searchInputRef","parsers","loadAllData","React","createRef","state","allData","allCharts","activeTabName","searchKeyword","loadCount","config","retrieveData","setState","updateTab","tabConfig","record","filteredEntries","filter","d","toLowerCase","indexOf","sort","b","total","reduce","sum","next","getElementById","chartEntries","slice","labels","e","datasets","label","backgroundColor","borderColor","borderWidth","current","textInput","trim","innerWidth","activeTab","chart","className","FormControl","InputLabel","id","Select","labelId","onChange","setActiveTab","target","MenuItem","style","margin","type","ref","onClick","applySearch","clearSearch","href","options","scales","yAxes","ticks","beginAtZero","plugins","datalabels","anchor","align","ChartDataLabels","height","getChartHeight","Component","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  NameValueCollection\n} from \"./Types\";\n\nexport const DATA_SOURCE = {\n  NYTIMES: \"nytimes\",\n  JOHNHOPKINS: \"johnhopkins\",\n}\n\nexport const TAB_NAMES = {\n  stateCases: \"stateCases\",\n  stateDeaths: \"stateDeaths\",\n  countyCases: \"countyCases\",\n  countryCases: \"countryCases\",\n  countryDeaths: \"countryDeaths\",\n  countryRecovereds: \"countryRecovereds\",\n}\n\nexport const TAB_CONFIG:NameValueCollection = {\n  [TAB_NAMES.stateCases]: {\n    title: \"Number of cases in the US by state\",\n    buttonText: \"Number of cases in the US by state\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by state\",\n    color: \"54, 162, 235\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n  [TAB_NAMES.stateDeaths]: {\n    title: \"Number of deaths in the US by state\",\n    buttonText: \"Number of deaths in the US by state\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of deaths by state\",\n    color: \"255, 206, 86\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n  [TAB_NAMES.countyCases]: {\n    title: \"Number of cases in the US by county (only showing the top 100)\",\n    buttonText: \"Number of cases in the US by county\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by county\",\n    color: \"255, 99, 132\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n  [TAB_NAMES.countryCases]: {\n    title: \"Number of cases in the world by country\",\n    buttonText: \"Number of cases in the world by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of cases by country\",\n    color: \"75, 192, 192\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n  [TAB_NAMES.countryDeaths]: {\n    title: \"Number of deaths in the world by country\",\n    buttonText: \"Number of deaths in the world by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of deaths by country\",\n    color: \"153, 102, 255\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n  [TAB_NAMES.countryRecovereds]: {\n    title: \"Number of recovered people in the world by country\",\n    buttonText: \"Number of recovered people in the world by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of recovered people by country\",\n    color: \"255, 159, 64\",\n    timeClass: \"nytimes-time\",\n    timeline: false,\n  },\n}\n\nexport const DATA_RETRIEVAL_CONFIG = [\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-1k3kd4i\",\n      targetTabNames: [\n        TAB_NAMES.stateCases,\n        TAB_NAMES.stateDeaths,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-ffcf53\",\n      targetTabNames: [\n        TAB_NAMES.countyCases,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.JOHNHOPKINS,\n    args: {\n      targetTabNames: [\n        TAB_NAMES.countryCases,\n        TAB_NAMES.countryDeaths,\n        TAB_NAMES.countryRecovereds,\n      ],\n    }\n  },\n];","import { CovidData, NameValueCollection } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst dataParsers = {\n  [TAB_NAMES.stateCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[1].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.stateDeaths]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.countyCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText + \"/\" + cells[1].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, ''))\n  }),\n}\n\nexport default class NYTimesParser implements IParser{\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    const data: CovidData = {};\n    args.targetTabNames.forEach((tabName:string) => {\n      data[tabName] = { \n        updateTime: document.querySelector(\".css-wcxsge\").innerHTML.replace(\"<!-- -->\", \"\"),\n        records: [{ date: \"default\", entries: [] }]\n      };\n    });\n    return new Promise(resolve => {\n      this._loadSourceTable(args.tableClass).then(() => {\n        this._parseSourceTable(data, args.tableClass, args.targetTabNames).then(() => {\n          resolve(data);\n        });\n      });\n    })\n  }\n\n  _loadSourceTable(tableClass: string) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        let button = document.querySelector(`button.${tableClass}`) as HTMLButtonElement;\n        if (button) {\n          clearInterval(timer);\n          button.click();\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n  \n  _parseSourceTable(data: CovidData, tableClass: string, targetTabNames: string[]) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        const rows = document.querySelectorAll(`tbody tr.${tableClass}`);\n        if (rows.length > 10) {\n          clearInterval(timer);\n          rows.forEach((row) => {\n            targetTabNames.forEach(tabName => {\n              const entry = dataParsers[tabName](row.querySelectorAll(\"td\"));\n              data[tabName].records[0].entries.push(entry);\n            });\n          });\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n}","import { CovidData, NameValueCollection, CovidRecord } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://pomber.github.io/covid19/timeseries.json\";\n\nexport default class JohnHopkinsParser implements IParser {\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    return new Promise(async resolve => {\n      fetch(sourceUrl)\n        .then(data => data.json())\n        .then(data => resolve(this._parseData(data)));\n    });\n  }\n\n  _parseData(srcData: any) {\n    const updateTime = `Update ${this._getDateString(new Date())}`;\n    const data: CovidData = {\n      [TAB_NAMES.countryCases]: { updateTime, records: [] },\n      [TAB_NAMES.countryDeaths]: { updateTime, records: [] },\n      [TAB_NAMES.countryRecovereds]: { updateTime, records: [] },\n    };\n\n    const recordsByDate:NameValueCollection = {};\n    Object.keys(srcData).forEach(country => {\n      const countryData = srcData[country];\n      countryData.forEach((countryRecord: any) => {\n        if (!recordsByDate[countryRecord.date]) {\n          recordsByDate[countryRecord.date] = [];\n        }\n        recordsByDate[countryRecord.date].push({ ...countryRecord, country });\n      });\n    });\n\n    Object.keys(recordsByDate).forEach(date => {\n      data[TAB_NAMES.countryCases].records.push({\n        date,\n        entries: recordsByDate[date].map((srcRecord:any) => ({\n          name: srcRecord.country,\n          value: srcRecord.confirmed\n        }))\n      });\n      data[TAB_NAMES.countryDeaths].records.push({\n        date,\n        entries: recordsByDate[date].map((srcRecord:any) => ({\n          name: srcRecord.country,\n          value: srcRecord.deaths\n        }))\n      });\n      data[TAB_NAMES.countryRecovereds].records.push({\n        date,\n        entries: recordsByDate[date].map((srcRecord:any) => ({\n          name: srcRecord.country,\n          value: srcRecord.recovered\n        }))\n      });\n    });\n\n    return data;\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  TAB_CONFIG,\n  DATA_SOURCE,\n  DATA_RETRIEVAL_CONFIG,\n} from './Constants';\nimport { CovidData, NameValueCollection } from './Types';\nimport NYTimesParser from './parsers/NewYorkTimesParser';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport IParser from './parsers/IParser';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport JohnHopkinsParser from './parsers/JohnHopkinsParser';\n\ntype StateType = {\n  allData: CovidData,\n  allCharts: NameValueCollection,\n  activeTabName: string,\n  searchKeyword: string,\n}\n\nexport default class App extends React.Component<{},StateType>{\n  searchInputRef:React.RefObject<any>;\n  parsers: {[dataSource:string]: IParser} = { \n    [DATA_SOURCE.NYTIMES]: new NYTimesParser(),\n    [DATA_SOURCE.JOHNHOPKINS]: new JohnHopkinsParser(),\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.loadAllData();\n    this.searchInputRef = React.createRef();\n    this.state = { \n      allData: null, \n      allCharts: {},\n      activeTabName: Object.keys(TAB_CONFIG)[0],\n      searchKeyword: null\n    };\n  }\n\n  loadAllData() {\n    let loadCount = 0;\n    let allData: CovidData = {};\n    new Promise(resolve => {\n      DATA_RETRIEVAL_CONFIG.forEach(config => {\n        loadCount++;\n        this.parsers[config.dataSource].retrieveData(config.args).then(async (data) => {\n          allData = { ...allData, ...data };\n          loadCount--;\n          if (loadCount <= 0) {\n            resolve();\n          }\n        });\n      });\n    }).then(async () => {\n      await this.setState({ allData });\n      await this.updateTab(this.state.activeTabName);\n    });\n  }\n\n  async updateTab(tabName: string) {\n    const allCharts = { ...this.state.allCharts };\n    const data = this.state.allData[tabName];\n    const tabConfig = TAB_CONFIG[tabName];\n\n    //TODO update to support timeline\n    const record = data.records[data.records.length - 1];\n    const filteredEntries = !this.state.searchKeyword ? record.entries :\n      record.entries.filter(d => d.name.toLowerCase().indexOf(this.state.searchKeyword) >= 0);\n      filteredEntries.sort((a, b) => b.value - a.value);\n    const total = filteredEntries.reduce((sum, next) => sum + next.value, 0);\n    document.getElementById(`${tabName}-total`).innerHTML = `Total: ${total}`;\n  \n    const chartEntries = filteredEntries.slice(0, 100);\n    allCharts[tabName] = {\n      labels: chartEntries.map((e) => { return e.name } ),\n      datasets: [{\n          label: tabConfig.chartLabel,\n          data: chartEntries.map((e) => { return e.value } ),\n          backgroundColor: `rgba(${tabConfig.color}, 0.2)`,\n          borderColor: `rgba(${tabConfig.color}, 1)`,\n          borderWidth: 1,\n      }]\n    };\n\n    await this.setState({ allCharts });\n  }\n  \n  async setActiveTab(tabName: string) {\n    this.searchInputRef.current.value = \"\";\n    await this.setState({ searchKeyword: \"\", activeTabName: tabName });\n    await this.updateTab(this.state.activeTabName);\n  }\n  \n  async applySearch() {\n    const textInput = this.searchInputRef.current;\n    if (!this.state.allData) {\n      textInput.value = \"\";\n      return;\n    }\n    const searchKeyword = textInput.value.trim().toLowerCase();\n    await this.setState({ searchKeyword });\n    await this.updateTab(this.state.activeTabName);\n  }\n  \n  async clearSearch() {\n    const textInput = this.searchInputRef.current;\n    textInput.value = \"\";\n    await this.setState({ searchKeyword: \"\" });\n    await this.updateTab(this.state.activeTabName);\n  }\n\n  getChartHeight() {\n    if (window.innerWidth < 500) {\n      return window.innerWidth * 3;\n    } else if (window.innerWidth < 750) {\n        return window.innerWidth * 2;\n    } else if (window.innerWidth < 1000) {\n      return window.innerWidth;\n    } else if (window.innerWidth < 1250) {\n      return window.innerWidth * 0.5;\n    } else {\n      return window.innerWidth * 0.25;\n    }\n  }\n\n  render() {\n    if (!this.state.activeTabName || !this.state.allData) {\n      return null;\n    }\n    const tabName = this.state.activeTabName;\n    const activeTab = TAB_CONFIG[tabName];\n    const chart = this.state.allCharts[tabName];\n\n    return (\n      <div className=\"app\">\n        <FormControl>\n          <InputLabel id=\"chart-select-label\">Select chart</InputLabel>\n          <Select\n            labelId=\"chart-select-label\"\n            id=\"chart-select\"\n            value={this.state.activeTabName}\n            onChange={(e:any) => this.setActiveTab(e.target.value)}>\n              {\n                Object.keys(TAB_CONFIG).map(tabName => {\n                  const config = TAB_CONFIG[tabName];\n                  return <MenuItem value={tabName}>{config.buttonText}</MenuItem>\n                })\n              }\n          </Select>\n        </FormControl>\n\n        <div id=\"search\" style={{margin:\"20px 0 50px\"}}>\n          <input type=\"text\" id=\"search-text\" ref={this.searchInputRef}/>\n          <button type=\"button\" onClick={() => this.applySearch()}>Search</button>\n          <button type=\"button\" onClick={() => this.clearSearch()}>Clear</button>\n        </div>\n\n        <div>\n          <h2>{activeTab.title}</h2>\n          <div>Source: <a target=\"_blank\" href={activeTab.srcLink}>{activeTab.srcText}</a></div>\n          <div>{this.state.allData[tabName].updateTime}</div>\n          <div id={`${tabName}-total`}></div>\n\n          {!chart ? null : \n            <HorizontalBar\n              data={this.state.allCharts[tabName]}\n              options={{\n                scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\n                plugins: { datalabels: { anchor: 'end', align: 'end' } },\n              }}\n              plugins={[ChartDataLabels]}\n              height={this.getChartHeight()}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './ServiceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}