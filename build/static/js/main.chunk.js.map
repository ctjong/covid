{"version":3,"sources":["ServiceWorker.ts","Constants.ts","NewYorkTimesParser.ts","App.tsx","Index.tsx"],"names":["Boolean","window","location","hostname","match","CHART_LABELS","DATA_SOURCE","TAB_NAMES","TAB_CONFIG","title","buttonText","buttonClass","srcLink","srcText","chartLabel","color","timeClass","DATA_RETRIEVAL_CONFIG","dataSource","args","tableClass","targetTabNames","dataParsers","cells","name","innerText","value","parseInt","replace","NYTimesParser","data","forEach","tabName","updateTime","document","querySelector","innerHTML","entries","Promise","resolve","_loadSourceTable","then","_parseSourceTable","timer","setInterval","button","clearInterval","click","rows","querySelectorAll","length","row","entry","push","App","props","searchInputRef","parsers","loadAllData","React","createRef","state","allData","allCharts","activeTabName","Object","keys","searchKeyword","loadCount","parsedData","config","retrieveData","a","this","d","setState","filteredData","filter","toLowerCase","indexOf","sort","b","total","reduce","sum","next","getElementById","chartData","slice","labels","map","datasets","label","backgroundColor","borderColor","borderWidth","clearSearch","textInput","current","trim","updateTab","activeTab","chart","className","key","type","onClick","setActiveTab","id","style","marginTop","ref","applySearch","target","href","width","height","options","scales","yAxes","ticks","beginAtZero","plugins","datalabels","anchor","align","Component","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  NameValueCollection\n} from \"./Types\";\n\nexport const CHART_LABELS = {\n  CASES: \"number of cases\",\n  DEATHS: \"number of deaths\",\n}\n\nexport const DATA_SOURCE = {\n  NYTIMES: \"nytimes\",\n}\n\nexport const TAB_NAMES = {\n  stateCases: \"stateCases\",\n  stateDeaths: \"stateDeaths\",\n  countyCases: \"countyCases\",\n}\n\nexport const TAB_CONFIG:NameValueCollection = {\n  [TAB_NAMES.stateCases]: {\n    title: \"Number of cases in the US by states\",\n    buttonText: \"Number of cases in the US by states\",\n    buttonClass: \"btn-primary\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: CHART_LABELS.CASES,\n    color: \"54, 162, 235\",\n    timeClass: \"nytimes-time\",\n  },\n  [TAB_NAMES.stateDeaths]: {\n    title: \"Number of deaths in the US by states\",\n    buttonText: \"Number of deaths in the US by states\",\n    buttonClass: \"btn-warning\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: CHART_LABELS.DEATHS,\n    color: \"255, 206, 86\",\n    timeClass: \"nytimes-time\",\n  },\n  [TAB_NAMES.countyCases]: {\n    title: \"Number of cases in the US by counties (only showing the top 100)\",\n    buttonText: \"Number of cases in the US by counties\",\n    buttonClass: \"btn-danger\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: CHART_LABELS.CASES,\n    color: \"255, 99, 132\",\n    timeClass: \"nytimes-time\",\n  },\n}\n\nexport const DATA_RETRIEVAL_CONFIG = [\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-1k3kd4i\",\n      targetTabNames: [\n        TAB_NAMES.stateCases,\n        TAB_NAMES.stateDeaths,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-ffcf53\",\n      targetTabNames: [\n        TAB_NAMES.countyCases,\n      ],\n    }\n  }\n];","import { CovidData, NameValueCollection } from \"./Types\";\nimport Parser from \"./IParser\";\nimport { TAB_NAMES } from \"./Constants\";\n\nconst dataParsers = {\n  [TAB_NAMES.stateCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[1].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.stateDeaths]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.countyCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText + \"/\" + cells[1].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, ''))\n  }),\n}\n\nexport default class NYTimesParser implements Parser{\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    const data: CovidData = {};\n    args.targetTabNames.forEach((tabName:string) => {\n      data[tabName] = { updateTime: document.querySelector(\".css-wcxsge\").innerHTML, entries: [] };\n    });\n    return new Promise(resolve => {\n      this._loadSourceTable(args.tableClass).then(() => {\n        this._parseSourceTable(data, args.tableClass, args.targetTabNames).then(() => {\n          resolve(data);\n        });\n      });\n    })\n  }\n\n  _loadSourceTable(tableClass: string) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        let button = document.querySelector(`button.${tableClass}`) as HTMLButtonElement;\n        if (button) {\n          clearInterval(timer);\n          button.click();\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n  \n  _parseSourceTable(data: CovidData, tableClass: string, targetTabNames: string[]) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        const rows = document.querySelectorAll(`tbody tr.${tableClass}`);\n        if (rows.length > 10) {\n          clearInterval(timer);\n          rows.forEach((row) => {\n            targetTabNames.forEach(tabName => {\n              const entry = dataParsers[tabName](row.querySelectorAll(\"td\"));\n              data[tabName].entries.push(entry);\n            });\n          });\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  TAB_CONFIG,\n  DATA_SOURCE,\n  DATA_RETRIEVAL_CONFIG,\n} from './Constants';\nimport { CovidData, NameValueCollection } from './Types';\nimport NYTimesParser from './NewYorkTimesParser';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport Parser from './IParser';\n\ntype StateType = {\n  allData: CovidData,\n  allCharts: NameValueCollection,\n  activeTabName: string,\n  searchKeyword: string,\n}\n\nexport default class App extends React.Component<{},StateType>{\n  searchInputRef:React.RefObject<any>;\n  parsers: {[dataSource:string]: Parser} = { \n    [DATA_SOURCE.NYTIMES]: new NYTimesParser()\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.loadAllData();\n    this.searchInputRef = React.createRef();\n    this.state = { \n      allData: null, \n      allCharts: {},\n      activeTabName: Object.keys(TAB_CONFIG)[0],\n      searchKeyword: null\n    };\n  }\n\n  loadAllData() {\n    let loadCount = 0;\n    let parsedData: CovidData[] = [];\n    new Promise(resolve => {\n      DATA_RETRIEVAL_CONFIG.forEach(config => {\n        loadCount++;\n        this.parsers[config.dataSource].retrieveData(config.args).then(async (data) => {\n          parsedData.push(data);\n          loadCount--;\n          if (loadCount <= 0) {\n            resolve();\n          }\n        });\n      });\n    }).then(() => {\n      let allData = {};\n      parsedData.forEach(d => allData = { ...allData, ...d });\n      this.setState({ allData });\n    });\n  }\n\n  async updateTab(tabName: string) {\n    const allCharts = { ...this.state.allCharts };\n    const data = this.state.allData[tabName];\n    const color = TAB_CONFIG[tabName].color;\n    const title = TAB_CONFIG[tabName].title;\n\n    const filteredData = !this.state.searchKeyword ? data.entries :\n      data.entries.filter(d => d.name.toLowerCase().indexOf(this.state.searchKeyword) >= 0);\n    filteredData.sort((a, b) => b.value - a.value);\n    const total = filteredData.reduce((sum, next) => sum + next.value, 0);\n    document.getElementById(`${tabName}-total`).innerHTML = `Total: ${total}`;\n  \n    const chartData = filteredData.slice(0, 100);\n    allCharts[tabName] = {\n      labels: chartData.map((d) => { return d.name } ),\n      datasets: [{\n          label: title,\n          data: chartData.map((d) => { return d.value } ),\n          backgroundColor: `rgba(${color}, 0.2)`,\n          borderColor: `rgba(${color}, 1)`,\n          borderWidth: 1,\n      }]\n    };\n\n    await this.setState({ allCharts });\n  }\n  \n  async setActiveTab(tabName: string) {\n    await this.clearSearch();\n    await this.setState({ activeTabName: tabName });\n  }\n  \n  async applySearch() {\n    const textInput = this.searchInputRef.current;\n    if (!this.state.allData) {\n      textInput.value = \"\";\n      return;\n    }\n    const searchKeyword = textInput.value.trim().toLowerCase();\n    await this.setState({ searchKeyword });\n    await this.updateTab(this.state.activeTabName);\n  }\n  \n  async clearSearch() {\n    const textInput = this.searchInputRef.current;\n    textInput.value = \"\";\n    await this.setState({ searchKeyword: \"\" });\n    await this.updateTab(this.state.activeTabName);\n  }\n\n  render() {\n    if (!this.state.activeTabName || !this.state.allData) {\n      return null;\n    }\n    const tabName = this.state.activeTabName;\n    const activeTab = TAB_CONFIG[tabName];\n    const chart = this.state.allCharts[tabName];\n\n    return (\n      <div className=\"app\">\n        <div>\n          {\n            Object.keys(TAB_CONFIG).map(tabName => (\n              <button \n                key={tabName}\n                type=\"button\"\n                className={`btn ${TAB_CONFIG[tabName].buttonClass}`}\n                onClick={() => this.setActiveTab(tabName)}>\n                {TAB_CONFIG[tabName].buttonText}\n              </button>\n            ))\n          }\n        </div>\n\n        <div id=\"search\" style={{marginTop:\"20px\"}}>\n          <input type=\"text\" id=\"search-text\" ref={this.searchInputRef}/>\n          <button type=\"button\" onClick={() => this.applySearch()}>Search</button>\n          <button type=\"button\" onClick={() => this.clearSearch()}>Clear</button>\n        </div>\n\n        <div>\n          <h2>{activeTab.title}</h2>\n          <div>Source: <a target=\"_blank\" href={activeTab.srcLink}>{activeTab.srcText}</a></div>\n\n          <div>{this.state.allData[tabName].updateTime}</div>\n          <div id={`${tabName}-total`}></div>\n\n          {!chart ? null : \n            <HorizontalBar\n              data={this.state.allCharts[tabName]}\n              width={1500}\n              height={2000}\n              options={{\n                scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\n                plugins: { datalabels: { anchor: 'end', align: 'end' } },\n              }}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './ServiceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}