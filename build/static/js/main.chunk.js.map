{"version":3,"sources":["ServiceWorker.ts","Constants.ts","parsers/NewYorkTimesParser.ts","parsers/JohnHopkinsParser.ts","App.tsx","Index.tsx"],"names":["Boolean","window","location","hostname","match","DATA_SOURCE","TAB_NAMES","TAB_CONFIG","title","buttonText","srcLink","srcText","chartLabel","timeline","DATA_RETRIEVAL_CONFIG","dataSource","args","targetTabNames","NYTimesParser","Promise","resolve","a","fetch","then","data","text","_parseData","_csvToJson","csv","rows","split","headers","shift","forEach","row","entry","cells","header","index","push","srcData","updateTime","this","_getDateString","Date","records","srcDataByDate","srcEntry","date","Object","keys","_parseRecordsByDate","cases","deaths","tabName","valueRetriever","entries","map","name","state","county","value","parseInt","filter","length","getFullYear","getMonth","getDate","JohnHopkinsParser","json","country","confirmed","recovered","App","props","searchInputRef","colors","parsers","loadAllData","React","createRef","Chart","defaults","global","defaultFontSize","allData","allCharts","activeTabName","getTabNameToSetAsActive","activeRecordIndex","searchKeyword","onpopstate","setActiveTab","loadCount","config","retrieveData","setStateAsync","updateActiveTabData","console","log","tabConfig","record","filteredEntries","d","toLowerCase","indexOf","sort","b","total","reduce","sum","next","chartEntries","slice","getRandomColor","labels","datasets","label","backgroundColor","borderColor","borderWidth","shouldUpdateHistory","current","history","pushState","document","textInput","trim","e","key","applySearch","paramName","href","queryString","RegExp","exec","stateDiff","setState","getQueryParam","r","Math","floor","random","g","className","CircularProgress","activeTab","chart","tabData","recordIndex","activeChart","chartHeight","target","rel","type","id","ref","onKeyPress","handleSearchKeyPress","onClick","clearSearch","Slider","defaultValue","valueLabelFormat","valueLabelDisplay","step","min","max","onChange","ev","handleDateChange","style","height","options","scales","yAxes","ticks","beginAtZero","plugins","datalabels","anchor","align","legend","display","maintainAspectRatio","ChartDataLabels","Component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  NameValueCollection\n} from \"./Types\";\n\nexport const DATA_SOURCE = {\n  NYTIMES: \"nytimes\",\n  JOHNHOPKINS: \"johnhopkins\",\n}\n\nexport const TAB_NAMES = {\n  countyCases: \"countyCases\",\n  countyDeaths: \"countyDeaths\",\n  countryCases: \"countryCases\",\n  countryDeaths: \"countryDeaths\",\n  countryRecovereds: \"countryRecovereds\",\n}\n\nexport const TAB_CONFIG:NameValueCollection = {\n  [TAB_NAMES.countyCases]: {\n    title: \"Number of cases in the US by county (top 100)\",\n    buttonText: \"US cases by county\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by county\",\n    timeline: true,\n  },\n  [TAB_NAMES.countyDeaths]: {\n    title: \"Number of deaths in the US by county (top 100)\",\n    buttonText: \"US deaths by county\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by county\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryCases]: {\n    title: \"Number of cases in the world by country\",\n    buttonText: \"Cases by country\",\n    srcLink: \"https://github.com/pomber/covid19\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of cases by country\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryDeaths]: {\n    title: \"Number of deaths in the world by country\",\n    buttonText: \"Deaths by country\",\n    srcLink: \"https://github.com/pomber/covid19\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of deaths by country\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryRecovereds]: {\n    title: \"Number of recovered people in the world by country\",\n    buttonText: \"Recovered people by country\",\n    srcLink: \"https://github.com/pomber/covid19\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of recovered people by country\",\n    timeline: true,\n  },\n}\n\nexport const DATA_RETRIEVAL_CONFIG = [\n  {\n    dataSource: DATA_SOURCE.JOHNHOPKINS,\n    args: {\n      targetTabNames: [\n        TAB_NAMES.countryCases,\n        TAB_NAMES.countryDeaths,\n        TAB_NAMES.countryRecovereds,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      targetTabNames: [\n        TAB_NAMES.countyCases,\n        TAB_NAMES.countyDeaths,\n      ],\n    }\n  },\n];","import { CovidData, NameValueCollection, CovidEntry } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\";\n\ntype SourceEntry = {\n  date?: string,\n  state?: string,\n  county?: string,\n  cases: string,\n  deaths: string,\n}\n\ntype SourceData = SourceEntry[]\n\ntype SourceDataByDate = {\n  [date: string]: SourceEntry[]\n}\n\nexport default class NYTimesParser implements IParser{\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    return new Promise(async resolve => {\n      fetch(sourceUrl)\n        .then(data => data.text())\n        .then(data => resolve(this._parseData(this._csvToJson(data) as SourceData)));\n    });\n  }\n\n  _csvToJson(csv: string) {\n    const rows = csv.split(\"\\n\");\n    const headers = rows.shift().split(\",\");\n    const data:NameValueCollection[] = [];\n    rows.forEach(row => {\n      const entry: NameValueCollection = {};\n      const cells = row.split(\",\");\n      headers.forEach((header, index) => {\n        entry[header] = cells[index];\n      });\n      data.push(entry);\n    });\n    return data;\n  }\n\n  _parseData(srcData: SourceData) {\n    const updateTime = `Last updated: ${this._getDateString(new Date())}`;\n    const data: CovidData = {\n      [TAB_NAMES.countyCases]: { updateTime, records: [] },\n      [TAB_NAMES.countyDeaths]: { updateTime, records: [] },\n    };\n\n    const srcDataByDate:SourceDataByDate = {};\n    srcData.forEach(srcEntry => {\n      if (!srcDataByDate[srcEntry.date]) {\n        srcDataByDate[srcEntry.date] = [];\n      }\n      srcDataByDate[srcEntry.date].push({ ...srcEntry });\n    });\n\n    Object.keys(srcDataByDate).forEach(date => {\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countyCases, srcEntry => srcEntry.cases);\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countyDeaths, srcEntry => srcEntry.deaths);\n    });\n\n    return data;\n  }\n\n  _parseRecordsByDate(\n    data:CovidData, \n    srcDataByDate:SourceDataByDate,\n    date:string,\n    tabName:string,\n    valueRetriever: (srcEntry: SourceEntry) => string\n  ) {\n    const entries:CovidEntry[] = srcDataByDate[date].map(srcEntry => ({\n      name: `${srcEntry.state}/${srcEntry.county}`,\n      value: parseInt(valueRetriever(srcEntry))\n    })).filter((entry:CovidEntry) => entry.value || entry.value === 0);\n    if (entries.length > 0) {\n      data[tabName].records.push({ date, entries });\n    }\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import { CovidData, NameValueCollection, CovidEntry } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://pomber.github.io/covid19/timeseries.json\";\n\ntype SourceEntry = {\n  date?: string,\n  country?: string,\n  confirmed: number,\n  deaths: number,\n  recovered: number,\n}\n\ntype SourceData = {\n  [country: string]: SourceEntry[]\n}\n\ntype SourceDataByDate = {\n  [date: string]: SourceEntry[]\n}\n\nexport default class JohnHopkinsParser implements IParser {\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    return new Promise(async resolve => {\n      fetch(sourceUrl)\n        .then(data => data.json())\n        .then(data => resolve(this._parseData(data)));\n    });\n  }\n\n  _parseData(srcData: SourceData) {\n    const updateTime = `Last updated: ${this._getDateString(new Date())}`;\n    const data: CovidData = {\n      [TAB_NAMES.countryCases]: { updateTime, records: [] },\n      [TAB_NAMES.countryDeaths]: { updateTime, records: [] },\n      [TAB_NAMES.countryRecovereds]: { updateTime, records: [] },\n    };\n\n    const srcDataByDate:SourceDataByDate = {};\n    Object.keys(srcData).forEach(country => {\n      const srcEntry = srcData[country];\n      srcEntry.forEach(srcEntry => {\n        if (!srcDataByDate[srcEntry.date]) {\n          srcDataByDate[srcEntry.date] = [];\n        }\n        srcDataByDate[srcEntry.date].push({ country, ...srcEntry });\n      });\n    });\n\n    Object.keys(srcDataByDate).forEach(date => {\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryCases, srcEntry => srcEntry.confirmed);\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryDeaths, srcEntry => srcEntry.deaths);\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryRecovereds, srcEntry => srcEntry.recovered);\n    });\n\n    return data;\n  }\n\n  _parseRecordsByDate(\n    data:CovidData, \n    srcDataByDate:SourceDataByDate,\n    date:string,\n    tabName:string,\n    valueRetriever: (srcEntry: SourceEntry) => number\n  ) {\n    const entries:CovidEntry[] = srcDataByDate[date].map(srcEntry => ({\n      name: srcEntry.country,\n      value: valueRetriever(srcEntry)\n    })).filter((entry:CovidEntry) => entry.value || entry.value === 0);\n    if (entries.length > 0) {\n      data[tabName].records.push({ date, entries });\n    }\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  TAB_CONFIG,\n  DATA_SOURCE,\n  DATA_RETRIEVAL_CONFIG,\n} from './Constants';\nimport { CovidData, ChartData } from './Types';\nimport NYTimesParser from './parsers/NewYorkTimesParser';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport IParser from './parsers/IParser';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { Slider, CircularProgress } from '@material-ui/core';\nimport JohnHopkinsParser from './parsers/JohnHopkinsParser';\nimport { Chart } from 'chart.js';\n\nconst TAB_NAME_QUERY_PARAM = \"chart\";\n\ntype StateType = {\n  allData: CovidData,\n  allCharts: {[tabName:string]: ChartData},\n  activeTabName: string,\n  activeRecordIndex: number,\n  searchKeyword: string,\n}\n\nexport default class App extends React.Component<{},StateType>{\n  searchInputRef: React.RefObject<any>;\n  colors: {[label:string]: string} = {};\n  parsers: {[dataSource:string]: IParser} = { \n    [DATA_SOURCE.NYTIMES]: new NYTimesParser(),\n    [DATA_SOURCE.JOHNHOPKINS]: new JohnHopkinsParser(),\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.loadAllData();\n    this.searchInputRef = React.createRef();\n    Chart.defaults.global.defaultFontSize = 14;\n\n    this.state = { \n      allData: null, \n      allCharts: {},\n      activeTabName: this.getTabNameToSetAsActive(),\n      activeRecordIndex: -1,\n      searchKeyword: null,\n    };\n\n    window.onpopstate = () => {\n      this.setActiveTab(this.getTabNameToSetAsActive(), false);\n    }\n  }\n\n  loadAllData() {\n    let loadCount = 0;\n    let allData: CovidData = {};\n    new Promise(resolve => {\n      DATA_RETRIEVAL_CONFIG.forEach(config => {\n        loadCount++;\n        this.parsers[config.dataSource].retrieveData(config.args).then(async (data) => {\n          allData = { ...allData, ...data };\n          loadCount--;\n          if (loadCount <= 0) {\n            resolve();\n          }\n        });\n      });\n    }).then(async () => {\n      await this.setStateAsync({ allData })\n      await this.updateActiveTabData();\n    });\n  }\n\n  async updateActiveTabData() {\n    const allCharts = { ...this.state.allCharts };\n    const tabName = this.state.activeTabName;\n    console.log(this.state.allData);\n    const data = this.state.allData[tabName];\n    const tabConfig = TAB_CONFIG[tabName];\n\n    let record;\n    if (tabConfig.timeline) {\n      let { activeRecordIndex } = this.state;\n      if (activeRecordIndex < 0 || activeRecordIndex >= data.records.length) {\n        await this.setStateAsync({ activeRecordIndex: data.records.length - 1 });\n        activeRecordIndex = this.state.activeRecordIndex;\n      }\n      record = data.records[activeRecordIndex];\n    } else {\n      record = data.records[data.records.length - 1];\n    }\n    \n    const filteredEntries = !this.state.searchKeyword ? record.entries :\n      record.entries.filter(d => d.name.toLowerCase().indexOf(this.state.searchKeyword) >= 0);\n      filteredEntries.sort((a, b) => b.value - a.value);\n    const total = filteredEntries.reduce((sum, next) => sum + next.value, 0);\n\n    const chartEntries = filteredEntries.slice(0, 100);\n    chartEntries.forEach(entry => {\n      if (!this.colors[entry.name]) {\n        this.colors[entry.name] = this.getRandomColor();\n      }\n    });\n  \n    allCharts[tabName] = {\n      total,\n      labels: chartEntries.map(entry => entry.name),\n      datasets: [{\n          label: tabConfig.chartLabel,\n          data: chartEntries.map(entry => entry.value),\n          backgroundColor: chartEntries.map(entry => `rgba(${this.colors[entry.name]}, 0.2)`),\n          borderColor: chartEntries.map(entry => `rgba(${this.colors[entry.name]}, 1)`),\n          borderWidth: 1,\n      }]\n    };\n\n    await this.setStateAsync({ allCharts });\n  }\n  \n  async setActiveTab(tabName: string, shouldUpdateHistory: boolean) {\n    this.searchInputRef.current.value = \"\";\n    await this.setStateAsync({\n      searchKeyword: \"\",\n      activeRecordIndex: -1,\n      activeTabName: tabName\n    });\n    await this.updateActiveTabData();\n    if (shouldUpdateHistory) {\n      window.history.pushState(null, window.document.title, `?${TAB_NAME_QUERY_PARAM}=${tabName}`)\n    }\n  }\n  \n  async applySearch() {\n    const textInput = this.searchInputRef.current;\n    if (!this.state.allData) {\n      textInput.value = \"\";\n      return;\n    }\n    const searchKeyword = textInput.value.trim().toLowerCase();\n    await this.setStateAsync({ searchKeyword });\n    await this.updateActiveTabData();\n  }\n  \n  async clearSearch() {\n    const textInput = this.searchInputRef.current;\n    textInput.value = \"\";\n    await this.setStateAsync({ searchKeyword: \"\" });\n    await this.updateActiveTabData();\n  }\n\n  async handleDateChange(index: number) {\n    await this.setStateAsync({ activeRecordIndex: index });\n    await this.updateActiveTabData();\n  }\n\n  async handleSearchKeyPress(e:any) {\n    if(e.key === 'Enter') { \n      await this.applySearch();\n    }\n  }\n  \n  getQueryParam(paramName:string){\n    let href = window.location.href;\n    let reg = new RegExp( '[?&]' + paramName + '=([^&#]*)', 'i' );\n    let queryString = reg.exec(href);\n    return queryString ? queryString[1] : null;\n  }\n\n  setStateAsync(stateDiff: any) {\n    return new Promise(resolve => this.setState(stateDiff, resolve));\n  }\n\n  getTabNameToSetAsActive() {\n    const tabNameParam = this.getQueryParam(TAB_NAME_QUERY_PARAM);\n    return tabNameParam || Object.keys(TAB_CONFIG)[0];\n  }\n\n  getRandomColor() {\n    const r = Math.floor(Math.random() * Math.floor(255));\n    const g = Math.floor(Math.random() * Math.floor(255));\n    const b = Math.floor(Math.random() * Math.floor(255));\n    return `${r},${g},${b}`;\n  }\n\n  render() {\n    if (!this.state.activeTabName || !this.state.allData || !this.state.allCharts[this.state.activeTabName]) {\n      return (\n        <div className=\"loading\">\n          <CircularProgress />\n          <div>Please wait</div>\n        </div>\n      );\n    }\n\n    const activeTabName = this.state.activeTabName;\n    const activeTab = TAB_CONFIG[activeTabName];\n    const chart = this.state.allCharts[activeTabName];\n    const tabData = this.state.allData[activeTabName];\n    const recordIndex = this.state.activeRecordIndex;\n    const activeChart = this.state.allCharts[activeTabName];\n    const chartHeight = activeChart.labels.length * 30 + 50;\n\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <div className=\"title-container\">\n            <h2>{activeTab.title}</h2>\n            <div>Source: <a target=\"_blank\" rel=\"noopener noreferrer\" href={activeTab.srcLink}>{activeTab.srcText}</a></div>\n            <div>{tabData.updateTime}</div>\n            <div>Total: {activeChart.total}</div>\n            <div className=\"search\">\n              <input type=\"text\" id=\"search-text\" ref={this.searchInputRef} onKeyPress={e => this.handleSearchKeyPress(e)}/>\n              <button type=\"button\" onClick={() => this.applySearch()}>Search</button>\n              <button type=\"button\" onClick={() => this.clearSearch()}>Clear</button>\n            </div>\n          </div>\n          <div className=\"chart-links\">\n            <div>\n              <label>Available charts:</label>\n            </div>\n            {\n              Object.keys(TAB_CONFIG).map(tabName => {\n                const config = TAB_CONFIG[tabName];\n                if (tabName === activeTabName) {\n                  return <div>{config.buttonText}</div>\n                } else {\n                  return <div><a onClick={() => this.setActiveTab(tabName, true)}>{config.buttonText}</a></div>\n                }\n              })\n            }\n          </div>\n        </div>\n\n        <div className=\"chart-controls\">\n          {\n            !activeTab.timeline || recordIndex < 0 || recordIndex >= tabData.records.length ?\n            null :\n            <div className=\"slider-container\">\n              <Slider\n                className=\"date-slider\"\n                defaultValue={tabData.records.length - 1}\n                valueLabelFormat={value => tabData.records[value].date}\n                valueLabelDisplay=\"off\"\n                step={1}\n                min={tabData.records.length - 31}\n                max={tabData.records.length - 1}\n                onChange={(ev: any, index: number) => this.handleDateChange(index) }\n              />\n              <div>Date: {tabData.records[recordIndex].date}</div>\n            </div>\n          }\n          {\n            !chart ?\n            null :\n            <div className=\"chart-container\" style={{height:chartHeight}}>\n              <HorizontalBar\n                data={activeChart}\n                options={{\n                  scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\n                  plugins: { datalabels: { anchor: 'end', align: 'end' } },\n                  legend: { display: false },\n                  maintainAspectRatio: false,\n                }}\n                plugins={[ChartDataLabels]}\n              />\n            </div>\n          }\n        </div>\n\n        <div className=\"footer\">\n          <div>&copy;&nbsp;{new Date().getFullYear()}&nbsp;<a href=\"http://www.ctjong.com\" target=\"_blank\">Christopher Tjong</a>. All Rights Reserved.</div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Index.css';\nimport * as serviceWorker from './ServiceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}