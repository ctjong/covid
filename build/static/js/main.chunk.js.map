{"version":3,"sources":["ServiceWorker.ts","Constants.ts","parsers/NewYorkTimesParser.ts","parsers/JohnHopkinsParser.ts","App.tsx","Index.tsx"],"names":["Boolean","window","location","hostname","match","CHART_TYPES","LINE_CHART_SCALES","DATA_SOURCE","TAB_NAMES","TAB_CONFIG","title","buttonText","sources","link","text","chartLabel","timeline","DATA_RETRIEVAL_CONFIG","dataSource","args","NYTimesParser","retrievalPromise","this","fetch","then","data","_parseData","_csvToJson","csv","rows","split","headers","shift","forEach","row","entry","cells","header","index","parseInt","push","srcData","records","countyDataByDate","stateDataByDate","srcEntry","date","state","existingEntry","cases","deaths","county","Object","keys","_parseRecordsByDate","srcDataByDate","tabName","valueRetriever","entries","map","name","value","filter","length","getFullYear","getMonth","getDate","WorldometerCountryMap","JohnHopkinsParser","Promise","resolve","a","json","jhData","_mergeWomData","mergedData","country","confirmed","recovered","womData","womEntries","reports","table","Country","_mergeWomEntries","womEntry","TotalCases","_getDateString","Date","splice","replace","App","props","searchInputRef","colors","loadAllData","React","createRef","Chart","defaults","global","defaultFontSize","allData","allCharts","activeTabName","getTabNameToSetAsActive","barChartRecordIndex","searchKeyword","activeChart","lineChartScale","onpopstate","setActiveTab","loadCount","config","parsers","retrieveData","setStateAsync","updateActiveTabData","recordIndex","record","filteredEntries","d","toLowerCase","indexOf","sort","b","getRandomColor","tabConfig","barChartFilteredEntries","getFilteredEntries","barTotal","reduce","sum","next","barChartEntries","slice","barConfig","labels","datasets","label","backgroundColor","borderColor","borderWidth","lineChartFilteredEntries","lineChartEntries","lineRecords","lineDates","historicalData","values","find","pastEntry","lineConfig","historicalRecord","logLineConfig","Math","log10","shouldUpdateHistory","current","history","pushState","document","textInput","trim","e","key","applySearch","paramName","href","queryString","RegExp","exec","stateDiff","setState","getQueryParam","r","floor","random","g","className","CircularProgress","activeTab","tabData","barChartHeight","shouldShowSlider","source","target","rel","type","id","ref","onKeyPress","handleSearchKeyPress","onClick","clearSearch","ToggleButtonGroup","size","exclusive","onChange","handleChartTypeChange","ToggleButton","handleScaleChange","style","height","options","maintainAspectRatio","plugins","datalabels","display","scales","yAxes","Slider","defaultValue","valueLabelFormat","valueLabelDisplay","step","min","max","ev","handleDateChange","ticks","beginAtZero","anchor","align","legend","ChartDataLabels","Component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  NameValueCollection\n} from \"./Types\";\n\nexport const CHART_TYPES = {\n  BAR: \"bar\",\n  LINE: \"line\",\n}\n\nexport const LINE_CHART_SCALES = {\n  LINEAR: \"linear\",\n  LOG: \"logarithmic\",\n}\n\nexport const DATA_SOURCE = {\n  NYTIMES: \"nytimes\",\n  JOHNHOPKINS: \"johnhopkins\",\n}\n\nexport const TAB_NAMES = {\n  countryCases: \"countryCases\",\n  countryDeaths: \"countryDeaths\",\n  countryRecovereds: \"countryRecovereds\",\n  stateCases: \"stateCases\",\n  stateDeaths: \"stateDeaths\",\n  countyCases: \"countyCases\",\n  countyDeaths: \"countyDeaths\",\n}\n\nexport const TAB_CONFIG:NameValueCollection = {\n  [TAB_NAMES.countryCases]: {\n    title: \"Number of cases in the world by country\",\n    buttonText: \"Cases by country\",\n    sources: [\n      { link: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\", text: \"John Hopkins\" },\n      { link: \"https://www.worldometers.info/coronavirus/\", text: \"Worldometer\" },\n    ],\n    chartLabel: \"number of cases by country\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryDeaths]: {\n    title: \"Number of deaths in the world by country\",\n    buttonText: \"Deaths by country\",\n    sources: [\n      { link: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\", text: \"John Hopkins\" },\n    ],\n    chartLabel: \"number of deaths by country\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryRecovereds]: {\n    title: \"Number of recovered cases in the world by country\",\n    buttonText: \"Recovered cases by country\",\n    sources: [\n      { link: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\", text: \"John Hopkins\" },\n    ],\n    chartLabel: \"number of recovered cases by country\",\n    timeline: true,\n  },\n  [TAB_NAMES.stateCases]: {\n    title: \"Number of cases in the US by state\",\n    buttonText: \"US cases by state\",\n    sources: [\n      { link: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\", text: \"New York Times\" },\n    ],\n    chartLabel: \"number of cases by state\",\n    timeline: true,\n  },\n  [TAB_NAMES.stateDeaths]: {\n    title: \"Number of deaths in the US by state\",\n    buttonText: \"US deaths by state\",\n    sources: [\n      { link: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\", text: \"New York Times\" },\n    ],\n    chartLabel: \"number of cases by state\",\n    timeline: true,\n  },\n  [TAB_NAMES.countyCases]: {\n    title: \"Number of cases in the US by county (top 100)\",\n    buttonText: \"US cases by county\",\n    sources: [\n      { link: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\", text: \"New York Times\" },\n    ],\n    chartLabel: \"number of cases by county\",\n    timeline: true,\n  },\n  [TAB_NAMES.countyDeaths]: {\n    title: \"Number of deaths in the US by county (top 100)\",\n    buttonText: \"US deaths by county\",\n    sources: [\n      { link: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\", text: \"New York Times\" },\n    ],\n    chartLabel: \"number of cases by county\",\n    timeline: true,\n  },\n}\n\nexport const DATA_RETRIEVAL_CONFIG = [\n  {\n    dataSource: DATA_SOURCE.JOHNHOPKINS,\n    args: {}\n  },\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {}\n  },\n];","import { CovidData, NameValueCollection, CovidEntry } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\";\n\ntype SourceEntry = {\n  date?: string,\n  state?: string,\n  county?: string,\n  cases: number,\n  deaths: number,\n}\n\ntype SourceData = SourceEntry[]\n\ntype SourceDataByDate = {\n  [date: string]: { [name: string]: SourceEntry }\n}\n\nexport default class NYTimesParser implements IParser{\n  retrievalPromise: Promise<CovidData>;\n\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    if (!this.retrievalPromise) { \n      this.retrievalPromise = fetch(sourceUrl)\n        .then(data => data.text())\n        .then(data => this._parseData(this._csvToJson(data) as SourceData));\n    }\n    return this.retrievalPromise;\n  }\n\n  _csvToJson(csv: string) {\n    const rows = csv.split(\"\\n\");\n    const headers = rows.shift().split(\",\");\n    const data:NameValueCollection[] = [];\n    rows.forEach(row => {\n      const entry: NameValueCollection = {};\n      const cells = row.split(\",\");\n      headers.forEach((header, index) => {\n        entry[header] = header === \"cases\" || header === \"deaths\" ? parseInt(cells[index]) : cells[index];\n      });\n      data.push(entry);\n    });\n    return data;\n  }\n\n  _parseData(srcData: SourceData) {\n    const data: CovidData = {\n      [TAB_NAMES.stateCases]: { records: [] },\n      [TAB_NAMES.stateDeaths]: { records: [] },\n      [TAB_NAMES.countyCases]: { records: [] },\n      [TAB_NAMES.countyDeaths]: { records: [] },\n    };\n\n    const countyDataByDate:SourceDataByDate = {};\n    const stateDataByDate:SourceDataByDate = {};\n    srcData.forEach(srcEntry => {\n      if (!stateDataByDate[srcEntry.date]) {\n        stateDataByDate[srcEntry.date] = {};\n      }\n      if (!stateDataByDate[srcEntry.date][srcEntry.state]) {\n        stateDataByDate[srcEntry.date][srcEntry.state] = { ...srcEntry };\n      } else {\n        const existingEntry = stateDataByDate[srcEntry.date][srcEntry.state]; \n        stateDataByDate[srcEntry.date][srcEntry.state] = { \n          cases: existingEntry.cases + srcEntry.cases,\n          deaths: existingEntry.deaths + srcEntry.deaths,\n        };\n      }\n\n      if (!countyDataByDate[srcEntry.date]) {\n        countyDataByDate[srcEntry.date] = {};\n      }\n      countyDataByDate[srcEntry.date][`${srcEntry.state}/${srcEntry.county}`] = { ...srcEntry };\n    });\n\n    Object.keys(countyDataByDate).forEach(date => {\n      this._parseRecordsByDate(data, stateDataByDate, date, TAB_NAMES.stateCases, srcEntry => srcEntry.cases);\n      this._parseRecordsByDate(data, stateDataByDate, date, TAB_NAMES.stateDeaths, srcEntry => srcEntry.deaths);\n      this._parseRecordsByDate(data, countyDataByDate, date, TAB_NAMES.countyCases, srcEntry => srcEntry.cases);\n      this._parseRecordsByDate(data, countyDataByDate, date, TAB_NAMES.countyDeaths, srcEntry => srcEntry.deaths);\n    });\n\n    return data;\n  }\n\n  _parseRecordsByDate(\n    data:CovidData, \n    srcDataByDate:SourceDataByDate,\n    date:string,\n    tabName:string,\n    valueRetriever: (srcEntry: SourceEntry) => number\n  ) {\n    const entries:CovidEntry[] = Object.keys(srcDataByDate[date]).map(name => ({\n      name,\n      value: valueRetriever(srcDataByDate[date][name])\n    })).filter((entry:CovidEntry) => entry.value || entry.value === 0);\n    if (entries.length > 0) {\n      data[tabName].records.push({ date, entries });\n    }\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import { CovidData, NameValueCollection, CovidEntry } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://pomber.github.io/covid19/timeseries.json\";\nconst worldometerUrl = \"https://covid19-server.chrismichael.now.sh/api/v1/AllReports\";\n\ntype SourceEntry = {\n  date?: string,\n  country?: string,\n  confirmed: number,\n  deaths: number,\n  recovered: number,\n}\n\ntype SourceData = {\n  [country: string]: SourceEntry[]\n}\n\ntype SourceDataByDate = {\n  [date: string]: SourceEntry[]\n}\n\ntype WorldometerEntry = {\n  TotalCases: string,\n  TotalDeaths: string,\n  TotalRecovered: string,\n  Country: string,\n}\n\ntype WorldometerData = {\n  reports: { table: WorldometerEntry[][] }[]\n}\n\nconst WorldometerCountryMap: {[key:string]: string} = {\n  \"USA\": \"US\",\n  \"S. Korea\": \"Korea, South\",\n}\n\nexport default class JohnHopkinsParser implements IParser {\n  retrievalPromise: Promise<CovidData>;\n\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    if (!this.retrievalPromise) {\n      this.retrievalPromise = new Promise<CovidData>(async resolve => {\n        const jhData = await fetch(sourceUrl)\n          .then(data => data.json())\n          .then(data => this._parseData(data));\n        const mergedData = await fetch(worldometerUrl)\n          .then(data => data.json())\n          .then(data => this._mergeWomData(jhData, data as WorldometerData));\n        resolve(mergedData);\n      });\n    }\n    return this.retrievalPromise;\n  }\n\n  _parseData(srcData: SourceData) {\n    const data: CovidData = {\n      [TAB_NAMES.countryCases]: { records: [] },\n      [TAB_NAMES.countryDeaths]: { records: [] },\n      [TAB_NAMES.countryRecovereds]: { records: [] },\n    };\n\n    const srcDataByDate:SourceDataByDate = {};\n    Object.keys(srcData).forEach(country => {\n      const srcEntry = srcData[country];\n      srcEntry.forEach(srcEntry => {\n        if (!srcDataByDate[srcEntry.date]) {\n          srcDataByDate[srcEntry.date] = [];\n        }\n        srcDataByDate[srcEntry.date].push({ country, ...srcEntry });\n      });\n    });\n\n    Object.keys(srcDataByDate).forEach(date => {\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryCases, srcEntry => srcEntry.confirmed);\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryDeaths, srcEntry => srcEntry.deaths);\n      this._parseRecordsByDate(data, srcDataByDate, date, TAB_NAMES.countryRecovereds, srcEntry => srcEntry.recovered);\n    });\n\n    return data;\n  }\n\n  _parseRecordsByDate(\n    data:CovidData, \n    srcDataByDate:SourceDataByDate,\n    date:string,\n    tabName:string,\n    valueRetriever: (srcEntry: SourceEntry) => number\n  ) {\n    const entries:CovidEntry[] = srcDataByDate[date].map(srcEntry => ({\n      name: srcEntry.country,\n      value: valueRetriever(srcEntry)\n    })).filter((entry:CovidEntry) => entry.value || entry.value === 0);\n    if (entries.length > 0) {\n      data[tabName].records.push({ date, entries });\n    }\n  }\n\n  _mergeWomData(jhData: CovidData, womData: WorldometerData): CovidData {\n    const womEntries = womData.reports[0].table[0].filter(entry => entry.Country !== \"Total:\");\n    this._mergeWomEntries(jhData, womEntries, \"countryCases\", womEntry => womEntry.TotalCases);\n    // this._mergeWomEntries(jhData, womEntries, \"countryDeaths\", womEntry => womEntry.TotalDeaths);\n    // this._mergeWomEntries(jhData, womEntries, \"countryRecovereds\", womEntry => womEntry.TotalRecovered);\n    return jhData;\n  }\n\n  _mergeWomEntries(jhData: CovidData, womEntries: WorldometerEntry[], tabName: string, valueRetriever: (womEntry: WorldometerEntry) => string) {\n    const date = this._getDateString(new Date())\n    const lastRecord = jhData[tabName].records[jhData[tabName].records.length - 1];\n    if (lastRecord.date === date) {\n      jhData[tabName].records.splice(jhData[tabName].records.length - 1, 1);\n    }\n\n    jhData[tabName].records.push({\n      date,\n      entries: womEntries.map(womEntry => ({\n        name: WorldometerCountryMap[womEntry.Country] || womEntry.Country,\n        value: parseInt(valueRetriever(womEntry).replace(/,/, \"\")),\n      }))\n    });\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  TAB_CONFIG,\n  DATA_SOURCE,\n  DATA_RETRIEVAL_CONFIG,\n  CHART_TYPES,\n  LINE_CHART_SCALES,\n} from './Constants';\nimport { CovidData, ChartData } from './Types';\nimport NYTimesParser from './parsers/NewYorkTimesParser';\nimport { HorizontalBar, Line } from 'react-chartjs-2';\nimport IParser from './parsers/IParser';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { Slider, CircularProgress } from '@material-ui/core';\nimport JohnHopkinsParser from './parsers/JohnHopkinsParser';\nimport { Chart } from 'chart.js';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nconst TAB_NAME_QUERY_PARAM = \"chart\";\n\ntype StateType = {\n  allData: CovidData,\n  allCharts: {[tabName:string]: ChartData},\n  activeTabName: string,\n  barChartRecordIndex: number,\n  searchKeyword: string,\n  activeChart: string,\n  lineChartScale: string,\n}\n\nexport default class App extends React.Component<{},StateType>{\n  searchInputRef: React.RefObject<any>;\n  colors: {[label:string]: string} = {};\n  static parsers: {[dataSource:string]: IParser} = { \n    [DATA_SOURCE.NYTIMES]: new NYTimesParser(),\n    [DATA_SOURCE.JOHNHOPKINS]: new JohnHopkinsParser(),\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.loadAllData();\n    this.searchInputRef = React.createRef();\n    Chart.defaults.global.defaultFontSize = 14;\n\n    this.state = { \n      allData: null, \n      allCharts: {},\n      activeTabName: this.getTabNameToSetAsActive(),\n      barChartRecordIndex: -1,\n      searchKeyword: null,\n      activeChart: CHART_TYPES.BAR,\n      lineChartScale: LINE_CHART_SCALES.LINEAR,\n    };\n\n    window.onpopstate = () => {\n      this.setActiveTab(this.getTabNameToSetAsActive(), false);\n    }\n  }\n\n  loadAllData() {\n    let loadCount = 0;\n    let allData: CovidData = {};\n    new Promise(resolve => {\n      DATA_RETRIEVAL_CONFIG.forEach(config => {\n        loadCount++;\n        App.parsers[config.dataSource].retrieveData(config.args).then(async (data) => {\n          allData = { ...allData, ...data };\n          loadCount--;\n          if (loadCount <= 0) {\n            resolve();\n          }\n        });\n      });\n    }).then(async () => {\n      await this.setStateAsync({ allData })\n      await this.updateActiveTabData();\n    });\n  }\n\n  getFilteredEntries(recordIndex: number) {\n    const { allData, activeTabName } = this.state;\n    const data = allData[activeTabName];\n    const record = data.records[recordIndex];\n    const filteredEntries = !this.state.searchKeyword ? record.entries :\n      record.entries.filter(d => d.name.toLowerCase().indexOf(this.state.searchKeyword) >= 0);\n      filteredEntries.sort((a, b) => b.value - a.value);\n    filteredEntries.forEach(entry => {\n      if (!this.colors[entry.name]) {\n        this.colors[entry.name] = this.getRandomColor();\n      }\n    });\n    return filteredEntries;\n  }\n\n  async updateActiveTabData() {\n    const { allCharts, activeTabName, allData } = this.state;\n    const data = allData[activeTabName];\n    const tabConfig = TAB_CONFIG[activeTabName];\n\n    let { barChartRecordIndex } = this.state;\n    if (barChartRecordIndex < 0 || barChartRecordIndex >= data.records.length) {\n      await this.setStateAsync({ barChartRecordIndex: data.records.length - 1 });\n      barChartRecordIndex = this.state.barChartRecordIndex;\n    }\n    const barChartFilteredEntries = this.getFilteredEntries(barChartRecordIndex);\n    const barTotal = barChartFilteredEntries.reduce((sum, next) => sum + next.value || 0, 0);\n    const barChartEntries = barChartFilteredEntries.slice(0, 100);\n    const barConfig = {\n      labels: barChartEntries.map(entry => entry.name),\n      datasets: [{\n        label: tabConfig.chartLabel,\n        data: barChartEntries.map(entry => entry.value),\n        backgroundColor: barChartEntries.map(entry => `rgba(${this.colors[entry.name]}, 0.2)`),\n        borderColor: barChartEntries.map(entry => `rgba(${this.colors[entry.name]}, 1)`),\n        borderWidth: 1,\n      }]\n    };\n\n    const lineChartFilteredEntries = this.getFilteredEntries(data.records.length - 1);\n    const lineChartEntries = lineChartFilteredEntries.slice(0, 10);\n    const lineRecords = data.records.slice(data.records.length - 30, data.records.length);\n    const lineDates = lineRecords.map(record => record.date);\n    const historicalData = lineChartEntries.map(entry => ({ \n      name: entry.name,\n      values: lineRecords.map(record => (record.entries.find(pastEntry => pastEntry.name === entry.name) || {}).value)\n    }));\n    const lineConfig = {\n      labels: lineDates,\n      datasets: historicalData.map(historicalRecord => ({\n        label: historicalRecord.name,\n        data: historicalRecord.values,\n        backgroundColor: [`rgba(${this.colors[historicalRecord.name]}, 0.2)`],\n        borderColor: [`rgba(${this.colors[historicalRecord.name]}, 1)`],\n        borderWidth: 1,\n      }))\n    };\n    const logLineConfig = {\n      labels: lineDates,\n      datasets: historicalData.map(historicalRecord => ({\n        label: historicalRecord.name,\n        data: historicalRecord.values.map(value => Math.log10(value)),\n        backgroundColor: [`rgba(${this.colors[historicalRecord.name]}, 0.2)`],\n        borderColor: [`rgba(${this.colors[historicalRecord.name]}, 1)`],\n        borderWidth: 1,\n      }))\n    };\n\n    await this.setStateAsync({ allCharts: {\n      ...allCharts, \n      [activeTabName]: { barTotal, barConfig, lineConfig, logLineConfig }\n    }});\n  }\n  \n  async setActiveTab(tabName: string, shouldUpdateHistory: boolean) {\n    this.searchInputRef.current.value = \"\";\n    await this.setStateAsync({\n      searchKeyword: \"\",\n      barChartRecordIndex: -1,\n      activeTabName: tabName\n    });\n    await this.updateActiveTabData();\n    if (shouldUpdateHistory) {\n      window.history.pushState(null, window.document.title, `?${TAB_NAME_QUERY_PARAM}=${tabName}`)\n    }\n  }\n  \n  async applySearch() {\n    const textInput = this.searchInputRef.current;\n    if (!this.state.allData) {\n      textInput.value = \"\";\n      return;\n    }\n    const searchKeyword = textInput.value.trim().toLowerCase();\n    await this.setStateAsync({ searchKeyword });\n    await this.updateActiveTabData();\n  }\n  \n  async clearSearch() {\n    const textInput = this.searchInputRef.current;\n    textInput.value = \"\";\n    await this.setStateAsync({ searchKeyword: \"\" });\n    await this.updateActiveTabData();\n  }\n\n  async handleDateChange(index: number) {\n    await this.setStateAsync({ barChartRecordIndex: index });\n    await this.updateActiveTabData();\n  }\n\n  async handleSearchKeyPress(e:any) {\n    if(e.key === 'Enter') { \n      await this.applySearch();\n    }\n  }\n  \n  getQueryParam(paramName:string){\n    let href = window.location.href;\n    let reg = new RegExp( '[?&]' + paramName + '=([^&#]*)', 'i' );\n    let queryString = reg.exec(href);\n    return queryString ? queryString[1] : null;\n  }\n\n  setStateAsync(stateDiff: any) {\n    return new Promise(resolve => this.setState(stateDiff, resolve));\n  }\n\n  getTabNameToSetAsActive() {\n    const tabNameParam = this.getQueryParam(TAB_NAME_QUERY_PARAM);\n    return tabNameParam || Object.keys(TAB_CONFIG)[0];\n  }\n\n  getRandomColor() {\n    const r = Math.floor(Math.random() * Math.floor(255));\n    const g = Math.floor(Math.random() * Math.floor(255));\n    const b = Math.floor(Math.random() * Math.floor(255));\n    return `${r},${g},${b}`;\n  }\n\n  handleChartTypeChange(value: string) {\n    this.setState({ activeChart: value });\n  }\n\n  handleScaleChange(value: string) {\n    this.setState({ lineChartScale: value });\n  }\n\n  render() {\n    const { activeTabName, allData, allCharts, barChartRecordIndex, activeChart, lineChartScale } = this.state;\n    if (!activeTabName || !allData || !allCharts[activeTabName]) {\n      return (\n        <div className=\"loading\">\n          <CircularProgress />\n          <div>Please wait</div>\n        </div>\n      );\n    }\n\n    const activeTab = TAB_CONFIG[activeTabName];\n    const tabData = allData[activeTabName];\n    const { barTotal, barConfig, lineConfig } = allCharts[activeTabName];\n    const barChartHeight = barConfig.labels.length * 30 + 50;\n    const shouldShowSlider = barChartRecordIndex >= 0 && barChartRecordIndex < tabData.records.length;\n\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n\n          <div className=\"title-container\">\n            <h2>{activeTab.title}</h2>\n\n            <div>Sources: {activeTab.sources.map((source:any, index:number) => \n              <span key={index}>&nbsp;(<a target=\"_blank\" rel=\"noopener noreferrer\" href={source.link}>{source.text}</a>)</span>)}</div>\n\n            <div className=\"search\">\n              <input type=\"text\" id=\"search-text\" ref={this.searchInputRef} onKeyPress={e => this.handleSearchKeyPress(e)}/>\n              <button type=\"button\" onClick={() => this.applySearch()}>Search</button>\n              <button type=\"button\" onClick={() => this.clearSearch()}>Clear</button>\n            </div>\n          </div>\n\n          <div className=\"chart-links\">\n            <div>\n              <label>Available charts:</label>\n            </div>\n            {\n              Object.keys(TAB_CONFIG).map(tabName => {\n                const config = TAB_CONFIG[tabName];\n                if (tabName === activeTabName) {\n                  return <div key={tabName}>{config.buttonText}</div>\n                } else {\n                  return <div key={tabName}><a onClick={() => this.setActiveTab(tabName, true)}>{config.buttonText}</a></div>\n                }\n              })\n            }\n          </div>\n        </div>\n\n        <div className={`chart-container ${activeChart}-active`}>\n          <div className=\"chart-selector\">\n            <ToggleButtonGroup \n              size=\"small\" \n              value={activeChart} \n              exclusive \n              onChange={(e:any, value:string) => this.handleChartTypeChange(value)}>\n                <ToggleButton value={CHART_TYPES.BAR}>Top 100</ToggleButton>\n                <ToggleButton value={CHART_TYPES.LINE}>Top 10 trend</ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n\n          <div className={`chart ${CHART_TYPES.LINE}-chart`}>\n            <div className=\"scale-selector\">\n              <ToggleButtonGroup \n                size=\"small\"\n                value={lineChartScale} \n                exclusive \n                onChange={(e:any, value:string) => this.handleScaleChange(value)}>\n                  <ToggleButton value={LINE_CHART_SCALES.LINEAR}>Linear</ToggleButton>\n                  <ToggleButton value={LINE_CHART_SCALES.LOG}>Logarithmic</ToggleButton>\n              </ToggleButtonGroup>\n            </div>\n            <div className=\"chart-wrapper\" style={{height: 800}}>\n              <Line\n                data={lineConfig}\n                options={{\n                  maintainAspectRatio: false,\n                  plugins: { datalabels: { display: false } },\n                  scales: { yAxes: [{ \n                    id: 'y-axis',\n                    type: lineChartScale === LINE_CHART_SCALES.LINEAR ? 'linear' : 'logarithmic'\n                  }]}\n                }}\n              />\n            </div>\n          </div>\n\n          <div className={`chart ${CHART_TYPES.BAR}-chart`}>\n            {\n              !shouldShowSlider ?\n              null :\n              <div className=\"slider-container\">\n                <Slider\n                  className=\"date-slider\"\n                  defaultValue={tabData.records.length - 1}\n                  valueLabelFormat={value => tabData.records[value].date}\n                  valueLabelDisplay=\"off\"\n                  step={1}\n                  min={tabData.records.length - 31}\n                  max={tabData.records.length - 1}\n                  onChange={(ev: any, index: number) => this.handleDateChange(index) }\n                />\n                <div>Date: {tabData.records[barChartRecordIndex].date}</div>\n              </div>\n            }\n            <div>Total: {barTotal}</div>\n            <div className=\"chart-wrapper\" style={{height:barChartHeight}}>\n              <HorizontalBar\n                data={barConfig}\n                options={{\n                  scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\n                  plugins: { datalabels: { anchor: 'end', align: 'end' } },\n                  legend: { display: false },\n                  maintainAspectRatio: false,\n                }}\n                plugins={[ChartDataLabels]}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"footer\">\n          <div>\n            &copy;&nbsp;{new Date().getFullYear()}&nbsp;\n            <a href=\"http://www.ctjong.com\" target=\"_blank\" rel=\"noopener noreferrer\">Christopher Tjong</a>.\n            All Rights Reserved.\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Index.css';\nimport * as serviceWorker from './ServiceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}