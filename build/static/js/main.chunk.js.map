{"version":3,"sources":["ServiceWorker.ts","Constants.ts","parsers/NewYorkTimesParser.ts","parsers/JohnHopkinsParser.ts","App.tsx","Index.tsx"],"names":["Boolean","window","location","hostname","match","DATA_SOURCE","TAB_NAMES","TAB_CONFIG","title","buttonText","srcLink","srcText","chartLabel","color","timeline","DATA_RETRIEVAL_CONFIG","dataSource","args","tableClass","targetTabNames","dataParsers","cells","name","innerText","value","parseInt","replace","NYTimesParser","data","forEach","tabName","updateTime","document","querySelector","innerHTML","records","date","entries","Promise","resolve","_loadSourceTable","then","_parseSourceTable","timer","setInterval","button","clearInterval","click","rows","querySelectorAll","length","row","entry","push","JohnHopkinsParser","a","fetch","json","_parseData","srcData","this","_getDateString","Date","recordsByDate","Object","keys","country","countryRecord","_parseRecordsByDate","fieldName","map","srcRecord","filter","getFullYear","getMonth","getDate","App","props","searchInputRef","parsers","loadAllData","React","createRef","state","allData","allCharts","activeTabName","getTabNameToSetAsActive","activeRecordIndex","searchKeyword","onpopstate","setActiveTab","loadCount","config","retrieveData","setStateAsync","updateActiveTabData","tabConfig","record","filteredEntries","d","toLowerCase","indexOf","sort","b","total","reduce","sum","next","chartEntries","slice","labels","e","datasets","label","backgroundColor","borderColor","borderWidth","shouldUpdateHistory","current","setState","history","pushState","textInput","trim","index","key","applySearch","paramName","href","queryString","RegExp","exec","stateDiff","getQueryParam","className","CircularProgress","activeTab","chart","tabData","recordIndex","activeChart","chartHeight","target","rel","type","id","ref","onKeyPress","handleSearchKeyPress","onClick","clearSearch","Slider","defaultValue","valueLabelFormat","valueLabelDisplay","step","min","max","onChange","ev","handleDateChange","style","height","options","scales","yAxes","ticks","beginAtZero","plugins","datalabels","anchor","align","legend","display","maintainAspectRatio","ChartDataLabels","Component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  NameValueCollection\n} from \"./Types\";\n\nexport const DATA_SOURCE = {\n  NYTIMES: \"nytimes\",\n  JOHNHOPKINS: \"johnhopkins\",\n}\n\nexport const TAB_NAMES = {\n  stateCases: \"stateCases\",\n  stateDeaths: \"stateDeaths\",\n  countyCases: \"countyCases\",\n  countryCases: \"countryCases\",\n  countryDeaths: \"countryDeaths\",\n  countryRecovereds: \"countryRecovereds\",\n}\n\nexport const TAB_CONFIG:NameValueCollection = {\n  [TAB_NAMES.stateCases]: {\n    title: \"Number of cases in the US by state\",\n    buttonText: \"US cases by state\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by state\",\n    color: \"54, 162, 235\",\n    timeline: false,\n  },\n  [TAB_NAMES.stateDeaths]: {\n    title: \"Number of deaths in the US by state\",\n    buttonText: \"US deaths by state\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of deaths by state\",\n    color: \"255, 206, 86\",\n    timeline: false,\n  },\n  [TAB_NAMES.countyCases]: {\n    title: \"Number of cases in the US by county (top 100)\",\n    buttonText: \"US cases by county\",\n    srcLink: \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\",\n    srcText: \"New York Times\",\n    chartLabel: \"number of cases by county\",\n    color: \"255, 99, 132\",\n    timeline: false,\n  },\n  [TAB_NAMES.countryCases]: {\n    title: \"Number of cases in the world by country\",\n    buttonText: \"Cases by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of cases by country\",\n    color: \"75, 192, 192\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryDeaths]: {\n    title: \"Number of deaths in the world by country\",\n    buttonText: \"Deaths by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of deaths by country\",\n    color: \"153, 102, 255\",\n    timeline: true,\n  },\n  [TAB_NAMES.countryRecovereds]: {\n    title: \"Number of recovered people in the world by country\",\n    buttonText: \"Recovered people by country\",\n    srcLink: \"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\",\n    srcText: \"John Hopkins\",\n    chartLabel: \"number of recovered people by country\",\n    color: \"255, 159, 64\",\n    timeline: true,\n  },\n}\n\nexport const DATA_RETRIEVAL_CONFIG = [\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-1k3kd4i\",\n      targetTabNames: [\n        TAB_NAMES.stateCases,\n        TAB_NAMES.stateDeaths,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.NYTIMES,\n    args: {\n      tableClass: \"svelte-ffcf53\",\n      targetTabNames: [\n        TAB_NAMES.countyCases,\n      ],\n    }\n  },\n  {\n    dataSource: DATA_SOURCE.JOHNHOPKINS,\n    args: {\n      targetTabNames: [\n        TAB_NAMES.countryCases,\n        TAB_NAMES.countryDeaths,\n        TAB_NAMES.countryRecovereds,\n      ],\n    }\n  },\n];","import { CovidData, NameValueCollection } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst dataParsers = {\n  [TAB_NAMES.stateCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[1].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.stateDeaths]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, '')),\n  }),\n  [TAB_NAMES.countyCases]: (cells: NodeListOf<HTMLTableDataCellElement>) => ({\n    name: cells[0].innerText + \"/\" + cells[1].innerText,\n    value: parseInt(cells[2].innerText.replace(/,/, ''))\n  }),\n}\n\nexport default class NYTimesParser implements IParser{\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    const data: CovidData = {};\n    args.targetTabNames.forEach((tabName:string) => {\n      data[tabName] = { \n        updateTime: document.querySelector(\".css-wcxsge\").innerHTML.replace(\"<!-- -->\", \"\"),\n        records: [{ date: \"default\", entries: [] }]\n      };\n    });\n    return new Promise(resolve => {\n      this._loadSourceTable(args.tableClass).then(() => {\n        this._parseSourceTable(data, args.tableClass, args.targetTabNames).then(() => {\n          resolve(data);\n        });\n      });\n    })\n  }\n\n  _loadSourceTable(tableClass: string) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        let button = document.querySelector(`button.${tableClass}`) as HTMLButtonElement;\n        if (button) {\n          clearInterval(timer);\n          button.click();\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n  \n  _parseSourceTable(data: CovidData, tableClass: string, targetTabNames: string[]) {\n    return new Promise((resolve) => {\n      const timer = setInterval(() => { \n        const rows = document.querySelectorAll(`tbody tr.${tableClass}`);\n        if (rows.length > 10) {\n          clearInterval(timer);\n          rows.forEach((row) => {\n            targetTabNames.forEach(tabName => {\n              const entry = dataParsers[tabName](row.querySelectorAll(\"td\"));\n              data[tabName].records[0].entries.push(entry);\n            });\n          });\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n}","import { CovidData, NameValueCollection, CovidEntry } from \"../Types\";\nimport IParser from \"./IParser\";\nimport { TAB_NAMES } from \"../Constants\";\n\nconst sourceUrl = \"https://pomber.github.io/covid19/timeseries.json\";\n\nexport default class JohnHopkinsParser implements IParser {\n  retrieveData(args: NameValueCollection): Promise<CovidData> {\n    return new Promise(async resolve => {\n      fetch(sourceUrl)\n        .then(data => data.json())\n        .then(data => resolve(this._parseData(data)));\n    });\n  }\n\n  _parseData(srcData: any) {\n    const updateTime = `Last updated: ${this._getDateString(new Date())}`;\n    const data: CovidData = {\n      [TAB_NAMES.countryCases]: { updateTime, records: [] },\n      [TAB_NAMES.countryDeaths]: { updateTime, records: [] },\n      [TAB_NAMES.countryRecovereds]: { updateTime, records: [] },\n    };\n\n    const recordsByDate:NameValueCollection = {};\n    Object.keys(srcData).forEach(country => {\n      const countryData = srcData[country];\n      countryData.forEach((countryRecord: any) => {\n        if (!recordsByDate[countryRecord.date]) {\n          recordsByDate[countryRecord.date] = [];\n        }\n        recordsByDate[countryRecord.date].push({ ...countryRecord, country });\n      });\n    });\n\n    Object.keys(recordsByDate).forEach(date => {\n      this._parseRecordsByDate(data, recordsByDate, date, TAB_NAMES.countryCases, \"confirmed\");\n      this._parseRecordsByDate(data, recordsByDate, date, TAB_NAMES.countryDeaths, \"deaths\");\n      this._parseRecordsByDate(data, recordsByDate, date, TAB_NAMES.countryRecovereds, \"recovered\");\n    });\n\n    return data;\n  }\n\n  _parseRecordsByDate(data:CovidData, recordsByDate:NameValueCollection, date:string, tabName:string, fieldName:string) {\n    const entries:CovidEntry[] = recordsByDate[date].map((srcRecord:any) => ({\n      name: srcRecord.country,\n      value: srcRecord[fieldName]\n    })).filter((entry:CovidEntry) => entry.value || entry.value === 0);\n    if (entries.length > 0) {\n      data[tabName].records.push({ date, entries });\n    }\n  }\n\n  _getDateString(date: Date) {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  TAB_CONFIG,\n  DATA_SOURCE,\n  DATA_RETRIEVAL_CONFIG,\n} from './Constants';\nimport { CovidData, ChartData } from './Types';\nimport NYTimesParser from './parsers/NewYorkTimesParser';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport IParser from './parsers/IParser';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { Slider, CircularProgress } from '@material-ui/core';\nimport JohnHopkinsParser from './parsers/JohnHopkinsParser';\n\nconst TAB_NAME_QUERY_PARAM = \"chart\";\n\ntype StateType = {\n  allData: CovidData,\n  allCharts: {[tabName:string]: ChartData},\n  activeTabName: string,\n  activeRecordIndex: number,\n  searchKeyword: string,\n}\n\nexport default class App extends React.Component<{},StateType>{\n  searchInputRef:React.RefObject<any>;\n  parsers: {[dataSource:string]: IParser} = { \n    [DATA_SOURCE.NYTIMES]: new NYTimesParser(),\n    [DATA_SOURCE.JOHNHOPKINS]: new JohnHopkinsParser(),\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.loadAllData();\n    this.searchInputRef = React.createRef();\n\n    this.state = { \n      allData: null, \n      allCharts: {},\n      activeTabName: this.getTabNameToSetAsActive(),\n      activeRecordIndex: -1,\n      searchKeyword: null,\n    };\n\n    window.onpopstate = () => {\n      this.setActiveTab(this.getTabNameToSetAsActive(), false);\n    }\n  }\n\n  loadAllData() {\n    let loadCount = 0;\n    let allData: CovidData = {};\n    new Promise(resolve => {\n      DATA_RETRIEVAL_CONFIG.forEach(config => {\n        loadCount++;\n        this.parsers[config.dataSource].retrieveData(config.args).then(async (data) => {\n          allData = { ...allData, ...data };\n          loadCount--;\n          if (loadCount <= 0) {\n            resolve();\n          }\n        });\n      });\n    }).then(async () => {\n      await this.setStateAsync({ allData })\n      await this.updateActiveTabData();\n    });\n  }\n\n  async updateActiveTabData() {\n    const allCharts = { ...this.state.allCharts };\n    const tabName = this.state.activeTabName;\n    const data = this.state.allData[tabName];\n    const tabConfig = TAB_CONFIG[tabName];\n\n    let record;\n    if (tabConfig.timeline) {\n      let { activeRecordIndex } = this.state;\n      if (activeRecordIndex < 0 || activeRecordIndex >= data.records.length) {\n        await this.setStateAsync({ activeRecordIndex: data.records.length - 1 });\n        activeRecordIndex = this.state.activeRecordIndex;\n      }\n      record = data.records[activeRecordIndex];\n    } else {\n      record = data.records[data.records.length - 1];\n    }\n    \n    const filteredEntries = !this.state.searchKeyword ? record.entries :\n      record.entries.filter(d => d.name.toLowerCase().indexOf(this.state.searchKeyword) >= 0);\n      filteredEntries.sort((a, b) => b.value - a.value);\n    const total = filteredEntries.reduce((sum, next) => sum + next.value, 0);\n  \n    const chartEntries = filteredEntries.slice(0, 100);\n    allCharts[tabName] = {\n      total,\n      labels: chartEntries.map((e) => { return e.name } ),\n      datasets: [{\n          label: tabConfig.chartLabel,\n          data: chartEntries.map((e) => { return e.value } ),\n          backgroundColor: `rgba(${tabConfig.color}, 0.2)`,\n          borderColor: `rgba(${tabConfig.color}, 1)`,\n          borderWidth: 1,\n      }]\n    };\n\n    await this.setStateAsync({ allCharts });\n  }\n  \n  async setActiveTab(tabName: string, shouldUpdateHistory: boolean) {\n    this.searchInputRef.current.value = \"\";\n    await this.setState({\n      searchKeyword: \"\",\n      activeRecordIndex: -1,\n      activeTabName: tabName\n    });\n    await this.updateActiveTabData();\n    if (shouldUpdateHistory) {\n      window.history.pushState(null, window.document.title, `?${TAB_NAME_QUERY_PARAM}=${tabName}`)\n    }\n  }\n  \n  async applySearch() {\n    const textInput = this.searchInputRef.current;\n    if (!this.state.allData) {\n      textInput.value = \"\";\n      return;\n    }\n    const searchKeyword = textInput.value.trim().toLowerCase();\n    await this.setStateAsync({ searchKeyword });\n    await this.updateActiveTabData();\n  }\n  \n  async clearSearch() {\n    const textInput = this.searchInputRef.current;\n    textInput.value = \"\";\n    await this.setStateAsync({ searchKeyword: \"\" });\n    await this.updateActiveTabData();\n  }\n\n  async handleDateChange(index: number) {\n    await this.setStateAsync({ activeRecordIndex: index });\n    await this.updateActiveTabData();\n  }\n\n  async handleSearchKeyPress(e:any) {\n    if(e.key === 'Enter') { \n      await this.applySearch();\n    }\n  }\n  \n  getQueryParam(paramName:string){\n    let href = window.location.href;\n    let reg = new RegExp( '[?&]' + paramName + '=([^&#]*)', 'i' );\n    let queryString = reg.exec(href);\n    return queryString ? queryString[1] : null;\n  }\n\n  setStateAsync(stateDiff: any) {\n    return new Promise(resolve => this.setState(stateDiff, resolve));\n  }\n\n  getTabNameToSetAsActive() {\n    const tabNameParam = this.getQueryParam(TAB_NAME_QUERY_PARAM);\n    return tabNameParam || Object.keys(TAB_CONFIG)[0];\n  }\n\n  render() {\n    if (!this.state.activeTabName || !this.state.allData || !this.state.allCharts[this.state.activeTabName]) {\n      return (\n        <div className=\"loading\">\n          <CircularProgress />\n          <div>Please wait</div>\n        </div>\n      );\n    }\n\n    const activeTabName = this.state.activeTabName;\n    const activeTab = TAB_CONFIG[activeTabName];\n    const chart = this.state.allCharts[activeTabName];\n    const tabData = this.state.allData[activeTabName];\n    const recordIndex = this.state.activeRecordIndex;\n    const activeChart = this.state.allCharts[activeTabName];\n    const chartHeight = activeChart.labels.length * 20 + 50;\n\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <div className=\"title-container\">\n            <h2>{activeTab.title}</h2>\n            <div>Source: <a target=\"_blank\" rel=\"noopener noreferrer\" href={activeTab.srcLink}>{activeTab.srcText}</a></div>\n            <div>{tabData.updateTime}</div>\n            <div>Total: {activeChart.total}</div>\n            <div className=\"search\">\n              <input type=\"text\" id=\"search-text\" ref={this.searchInputRef} onKeyPress={e => this.handleSearchKeyPress(e)}/>\n              <button type=\"button\" onClick={() => this.applySearch()}>Search</button>\n              <button type=\"button\" onClick={() => this.clearSearch()}>Clear</button>\n            </div>\n          </div>\n          <div className=\"chart-links\">\n            <div>\n              <label>Available charts:</label>\n            </div>\n            {\n              Object.keys(TAB_CONFIG).map(tabName => {\n                const config = TAB_CONFIG[tabName];\n                if (tabName === activeTabName) {\n                  return <div>{config.buttonText}</div>\n                } else {\n                  return <div><a onClick={() => this.setActiveTab(tabName, true)}>{config.buttonText}</a></div>\n                }\n              })\n            }\n          </div>\n        </div>\n\n        <div className=\"chart-controls\">\n          {\n            !activeTab.timeline || recordIndex < 0 || recordIndex >= tabData.records.length ?\n            null :\n            <div className=\"slider-container\">\n              <Slider\n                className=\"date-slider\"\n                defaultValue={tabData.records.length - 1}\n                valueLabelFormat={value => tabData.records[value].date}\n                valueLabelDisplay=\"off\"\n                step={1}\n                min={tabData.records.length - 31}\n                max={tabData.records.length - 1}\n                onChange={(ev: any, index: number) => this.handleDateChange(index) }\n              />\n              <div>Date: {tabData.records[recordIndex].date}</div>\n            </div>\n          }\n          {\n            !chart ?\n            null :\n            <div className=\"chart-container\" style={{height:chartHeight}}>\n              <HorizontalBar\n                data={activeChart}\n                options={{\n                  scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\n                  plugins: { datalabels: { anchor: 'end', align: 'end' } },\n                  legend: { display: false },\n                  maintainAspectRatio: false,\n                }}\n                plugins={[ChartDataLabels]}\n              />\n            </div>\n          }\n        </div>\n\n        <div className=\"footer\">\n          <div>&copy;&nbsp;{new Date().getFullYear()}&nbsp;<a href=\"http://www.ctjong.com\" target=\"_blank\">Christopher Tjong</a>. All Rights Reserved.</div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './ServiceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}